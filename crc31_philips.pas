unit crc31_philips;
//CRC-31 PHILIPS
//Author: domasz
//Version: 0.1 (2022-11-17)
//Licence: MIT

interface

uses SysUtils, HasherBase;

type THashercrc31_philips = class(THasherbase)
  private
    FHash: Cardinal;
  public
    constructor Create; override;
    procedure Update(Msg: PByte; Length: Integer); override;
    function Final: String; override;
end;


implementation

var Table: array[0..255] of LongInt = (
$00000000, $04C11DB7, $09823B6E, $0D4326D9, $130476DC, $17C56B6B, $1A864DB2, $1E475005,
$2608EDB8, $22C9F00F, $2F8AD6D6, $2B4BCB61, $350C9B64, $31CD86D3, $3C8EA00A, $384FBDBD,
$4C11DB70, $48D0C6C7, $4593E01E, $4152FDA9, $5F15ADAC, $5BD4B01B, $569796C2, $52568B75,
$6A1936C8, $6ED82B7F, $639B0DA6, $675A1011, $791D4014, $7DDC5DA3, $709F7B7A, $745E66CD,
$1CE2AB57, $1823B6E0, $15609039, $11A18D8E, $0FE6DD8B, $0B27C03C, $0664E6E5, $02A5FB52,
$3AEA46EF, $3E2B5B58, $33687D81, $37A96036, $29EE3033, $2D2F2D84, $206C0B5D, $24AD16EA,
$50F37027, $54326D90, $59714B49, $5DB056FE, $43F706FB, $47361B4C, $4A753D95, $4EB42022,
$76FB9D9F, $723A8028, $7F79A6F1, $7BB8BB46, $65FFEB43, $613EF6F4, $6C7DD02D, $68BCCD9A,
$39C556AE, $3D044B19, $30476DC0, $34867077, $2AC12072, $2E003DC5, $23431B1C, $278206AB,
$1FCDBB16, $1B0CA6A1, $164F8078, $128E9DCF, $0CC9CDCA, $0808D07D, $054BF6A4, $018AEB13,
$75D48DDE, $71159069, $7C56B6B0, $7897AB07, $66D0FB02, $6211E6B5, $6F52C06C, $6B93DDDB,
$53DC6066, $571D7DD1, $5A5E5B08, $5E9F46BF, $40D816BA, $44190B0D, $495A2DD4, $4D9B3063,
$2527FDF9, $21E6E04E, $2CA5C697, $2864DB20, $36238B25, $32E29692, $3FA1B04B, $3B60ADFC,
$032F1041, $07EE0DF6, $0AAD2B2F, $0E6C3698, $102B669D, $14EA7B2A, $19A95DF3, $1D684044,
$69362689, $6DF73B3E, $60B41DE7, $64750050, $7A325055, $7EF34DE2, $73B06B3B, $7771768C,
$4F3ECB31, $4BFFD686, $46BCF05F, $427DEDE8, $5C3ABDED, $58FBA05A, $55B88683, $51799B34,
$738AAD5C, $774BB0EB, $7A089632, $7EC98B85, $608EDB80, $644FC637, $690CE0EE, $6DCDFD59,
$558240E4, $51435D53, $5C007B8A, $58C1663D, $46863638, $42472B8F, $4F040D56, $4BC510E1,
$3F9B762C, $3B5A6B9B, $36194D42, $32D850F5, $2C9F00F0, $285E1D47, $251D3B9E, $21DC2629,
$19939B94, $1D528623, $1011A0FA, $14D0BD4D, $0A97ED48, $0E56F0FF, $0315D626, $07D4CB91,
$6F68060B, $6BA91BBC, $66EA3D65, $622B20D2, $7C6C70D7, $78AD6D60, $75EE4BB9, $712F560E,
$4960EBB3, $4DA1F604, $40E2D0DD, $4423CD6A, $5A649D6F, $5EA580D8, $53E6A601, $5727BBB6,
$2379DD7B, $27B8C0CC, $2AFBE615, $2E3AFBA2, $307DABA7, $34BCB610, $39FF90C9, $3D3E8D7E,
$057130C3, $01B02D74, $0CF30BAD, $0832161A, $1675461F, $12B45BA8, $1FF77D71, $1B3660C6,
$4A4FFBF2, $4E8EE645, $43CDC09C, $470CDD2B, $594B8D2E, $5D8A9099, $50C9B640, $5408ABF7,
$6C47164A, $68860BFD, $65C52D24, $61043093, $7F436096, $7B827D21, $76C15BF8, $7200464F,
$065E2082, $029F3D35, $0FDC1BEC, $0B1D065B, $155A565E, $119B4BE9, $1CD86D30, $18197087,
$2056CD3A, $2497D08D, $29D4F654, $2D15EBE3, $3352BBE6, $3793A651, $3AD08088, $3E119D3F,
$56AD50A5, $526C4D12, $5F2F6BCB, $5BEE767C, $45A92679, $41683BCE, $4C2B1D17, $48EA00A0,
$70A5BD1D, $7464A0AA, $79278673, $7DE69BC4, $63A1CBC1, $6760D676, $6A23F0AF, $6EE2ED18,
$1ABC8BD5, $1E7D9662, $133EB0BB, $17FFAD0C, $09B8FD09, $0D79E0BE, $003AC667, $04FBDBD0,
$3CB4666D, $38757BDA, $35365D03, $31F740B4, $2FB010B1, $2B710D06, $26322BDF, $22F33668
);

constructor THashercrc31_philips.Create;
begin
  inherited Create;
  FHash := $7fffffff;
  Check := '0CE9E46C';
end;

procedure THashercrc31_philips.Update(Msg: PByte; Length: Integer);
var i: Integer;
begin
  for i:=0 to Length-1 do begin
    FHash := (FHash shl 8) xor Table[(Msg^ xor (FHash shr 23)) and $FF];
    Inc(Msg);
  end;   
end;

function THashercrc31_philips.Final: String;
begin
  FHash := FHash and $7fffffff;
  FHash := FHash xor $7fffffff;
  Result := IntToHex(FHash, 8);
end;


initialization
  HasherList.RegisterHasher('CRC-31 PHILIPS', THashercrc31_philips);

end.
